AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Template for creating the AWS DMS to Hudi Infrastructure and Pipeline

Parameters:
  VpcSubnetIds:
    Type: String
    Description: >
      Comma separated list of two existing private subnets this stack will run in.

  SourceDatabaseSecret:
    Type: String
    Default: gameday/sourcedb/dms
    Description: >
      The AWS Secrets Manager secret that contains the database info, the following properties are expected:
        {
          "username": "<username>",
          "password": "<password>",
          "engine": "<mysql | oracle | postgres | mariadb | aurora | aurora-postgresql | sqlserver>",
          "host": "<db hostname>",
          "port": <db port>,
          "dbname": "<db name>"
        }

  TargetDatabaseSecret:
    Type: String
    Default: gameday/targetdb/dms
    Description: >
      The AWS Secrets Manager secret that contains the database info, the following properties are expected:
        {
          "username": "<username>",
          "password": "<password>",
          "engine": "<mysql | oracle | postgres | mariadb | aurora | aurora-postgresql | sqlserver>",
          "host": "<db hostname>",
          "port": <db port>,
          "dbname": "<db name>"
        }

  DatabaseSchema:
    Type: String
    Description: The schema inside the source database to be migrated
    Default: %

  DmsDbCertificateArn:
    Type: String
    Description: >
      The AWS DMS Certificate arn used if encryption in transit with ca verification is required, if unset then
      'require' mode will be used with no ca verification
    Default: ''

  ReplicationInstanceClass:
    Type: String
    Description: The replication instance class
    Default: dms.r5.xlarge

  ReplicationInstanceStorage:
    Type: Number
    Description: The size (in GB) of the replication instance local storage
    Default: 200

  CreateReplicationTask:
    Type: String
    Description: Whether to create the replication instance and task or not, can be set to FALSE in order to reduce running infrastructure
    AllowedValues: [ 'TRUE', 'FALSE' ]
    Default: 'TRUE'

  CreateDmsVpcRole:
    Type: String
    Description: Whether or not to create the DMS VPC Role
    AllowedValues: [ 'TRUE', 'FALSE' ]
    Default: 'FALSE'

Conditions:
  SslCaVerification: !Not [!Equals [ !Ref DmsDbCertificateArn, '' ]]
  CreateReplicationTask: !Equals [ !Ref CreateReplicationTask, 'TRUE' ]
  CreateDmsVpcRole: !Equals [ !Ref CreateDmsVpcRole, 'TRUE' ]

Resources:
  #  If DMS has not been previously used in this account, you will need to create the dms-vpc-role or DMS resources in this stack will fail
  #  With error: The IAM Role arn:aws:iam::${AccountId}:role/dms-vpc-role is not configured properly.
  #  This can be done through the GUI by manually configuring a Subnet group, or
  #  by Parameter CreateDmsVpcRole=TRUE in this template. If the role already exists, just set this to FALSE
  DmsVpcRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Retain
    Condition: CreateDmsVpcRole
    Properties:
      RoleName: dms-vpc-role
      AssumeRolePolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "dms.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          }
        ]
      }
      Description: VPC Service role for DMS
      ManagedPolicyArns:
        - !Sub 'arn:aws:iam::aws:policy/service-role/AmazonDMSVPCManagementRole'

  DmsSubnetGroup:
    Type: AWS::DMS::ReplicationSubnetGroup
    Properties:
      ReplicationSubnetGroupDescription: Replication group for private subnets A and B
      SubnetIds:
        - !Select [ 0, !Split [ ',', !Ref VpcSubnetIds ] ]
        - !Select [ 1, !Split [ ',', !Ref VpcSubnetIds ] ]

  DmsSourceDbEndpoint:
    Type: AWS::DMS::Endpoint
    Properties:
      ResourceIdentifier: !Sub '${AWS::StackName}-sourcedb-endpoint'
      CertificateArn: !If [ SslCaVerification, !Ref DmsDbCertificateArn, !Ref AWS::NoValue ]
      DatabaseName: !Sub '{{resolve:secretsmanager:${SourceDatabaseSecret}:SecretString:dbname}}'
      EndpointType: source
      EngineName: !Sub '{{resolve:secretsmanager:${SourceDatabaseSecret}:SecretString:engine}}'
      ExtraConnectionAttributes: !Ref AWS::NoValue
      Password: !Sub '{{resolve:secretsmanager:${SourceDatabaseSecret}:SecretString:password}}'
      Port: !Sub '{{resolve:secretsmanager:${SourceDatabaseSecret}:SecretString:port}}'
      ServerName: !Sub '{{resolve:secretsmanager:${SourceDatabaseSecret}:SecretString:host}}'
      SslMode: !If [ SslCaVerification, 'verify-ca', 'require' ]
      Username: !Sub '{{resolve:secretsmanager:${SourceDatabaseSecret}:SecretString:username}}'

  DmsTargetDbEndpoint:
    Type: AWS::DMS::Endpoint
    Properties:
      ResourceIdentifier: !Sub '${AWS::StackName}-targetdb-endpoint'
      CertificateArn: !If [ SslCaVerification, !Ref DmsDbCertificateArn, !Ref AWS::NoValue ]
      DatabaseName: !Sub '{{resolve:secretsmanager:${TargetDatabaseSecret}:SecretString:dbname}}'
      EndpointType: source
      EngineName: !Sub '{{resolve:secretsmanager:${TargetDatabaseSecret}:SecretString:engine}}'
      ExtraConnectionAttributes: initstmt=SET FOREIGN_KEY_CHECKS=0;
      Password: !Sub '{{resolve:secretsmanager:${TargetDatabaseSecret}:SecretString:password}}'
      Port: !Sub '{{resolve:secretsmanager:${TargetDatabaseSecret}:SecretString:port}}'
      ServerName: !Sub '{{resolve:secretsmanager:${TargetDatabaseSecret}:SecretString:host}}'
      SslMode: !If [ SslCaVerification, 'verify-ca', 'require' ]
      Username: !Sub '{{resolve:secretsmanager:${TargetDatabaseSecret}:SecretString:username}}'

  ReplicationInstance:
    Type: AWS::DMS::ReplicationInstance
    Condition: CreateReplicationTask
    Properties:
      ReplicationInstanceIdentifier: !Sub '${AWS::StackName}-instance'
      ResourceIdentifier: !Sub '${AWS::StackName}-instance'
      AllocatedStorage: !Ref ReplicationInstanceStorage
      AllowMajorVersionUpgrade: FALSE
      AutoMinorVersionUpgrade: TRUE
      EngineVersion: 3.4.6
      #  This will use the default aws managed dms encryption key
      KmsKeyId: !Ref AWS::NoValue
      MultiAZ: FALSE  # Maybe set to true if production
      PreferredMaintenanceWindow: 'Sat:20:00-Sun:04:00'
      PubliclyAccessible: FALSE
      ReplicationInstanceClass: !Ref ReplicationInstanceClass
      ReplicationSubnetGroupIdentifier: !Ref DmsSubnetGroup
      #  This will attach the default security group
      VpcSecurityGroupIds: !Ref AWS::NoValue

  ReplicationTask:
    Type: AWS::DMS::ReplicationTask
    Condition: CreateReplicationTask
    Properties:
      MigrationType: full-load-and-cdc
      ReplicationInstanceArn: !Ref ReplicationInstance
      ReplicationTaskIdentifier: !Sub '${AWS::StackName}-task'
      ResourceIdentifier: !Sub '${AWS::StackName}-task'
      SourceEndpointArn: !Ref DmsSourceDbEndpoint
      TargetEndpointArn: !Ref DmsTargetDbEndpoint
      ReplicationTaskSettings: >
        {
          "Logging": {
            "EnableLogging": true,
            "LogComponents": [
              {
                "Severity": "LOGGER_SEVERITY_DEFAULT",
                "Id": "TRANSFORMATION"
              },
              {
                "Severity": "LOGGER_SEVERITY_ERROR",
                "Id": "SOURCE_UNLOAD"
              },
              {
                "Severity": "LOGGER_SEVERITY_DEFAULT",
                "Id": "IO"
              },
              {
                "Severity": "LOGGER_SEVERITY_ERROR",
                "Id": "TARGET_LOAD"
              },
              {
                "Severity": "LOGGER_SEVERITY_DEFAULT",
                "Id": "PERFORMANCE"
              },
              {
                "Severity": "LOGGER_SEVERITY_ERROR",
                "Id": "SOURCE_CAPTURE"
              },
              {
                "Severity": "LOGGER_SEVERITY_DEFAULT",
                "Id": "SORTER"
              },
              {
                "Severity": "LOGGER_SEVERITY_DEFAULT",
                "Id": "REST_SERVER"
              },
              {
                "Severity": "LOGGER_SEVERITY_DEFAULT",
                "Id": "VALIDATOR_EXT"
              },
              {
                "Severity": "LOGGER_SEVERITY_ERROR",
                "Id": "TARGET_APPLY"
              },
              {
                "Severity": "LOGGER_SEVERITY_ERROR",
                "Id": "TASK_MANAGER"
              },
              {
                "Severity": "LOGGER_SEVERITY_DEFAULT",
                "Id": "TABLES_MANAGER"
              },
              {
                "Severity": "LOGGER_SEVERITY_DEFAULT",
                "Id": "METADATA_MANAGER"
              },
              {
                "Severity": "LOGGER_SEVERITY_DEFAULT",
                "Id": "FILE_FACTORY"
              },
              {
                "Severity": "LOGGER_SEVERITY_DEFAULT",
                "Id": "COMMON"
              },
              {
                "Severity": "LOGGER_SEVERITY_DEFAULT",
                "Id": "ADDONS"
              },
              {
                "Severity": "LOGGER_SEVERITY_DEFAULT",
                "Id": "DATA_STRUCTURE"
              },
              {
                "Severity": "LOGGER_SEVERITY_DEFAULT",
                "Id": "COMMUNICATION"
              },
              {
                "Severity": "LOGGER_SEVERITY_DEFAULT",
                "Id": "FILE_TRANSFER"
              }
            ]
          },
          "StreamBufferSettings": {
            "StreamBufferCount": 3,
            "CtrlStreamBufferSizeInMB": 5,
            "StreamBufferSizeInMB": 8
          },
          "ErrorBehavior": {
            "FailOnNoTablesCaptured": true,
            "ApplyErrorUpdatePolicy": "LOG_ERROR",
            "FailOnTransactionConsistencyBreached": false,
            "RecoverableErrorThrottlingMax": 1800,
            "DataErrorEscalationPolicy": "SUSPEND_TABLE",
            "ApplyErrorEscalationCount": 0,
            "RecoverableErrorStopRetryAfterThrottlingMax": true,
            "RecoverableErrorThrottling": true,
            "ApplyErrorFailOnTruncationDdl": false,
            "DataTruncationErrorPolicy": "LOG_ERROR",
            "ApplyErrorInsertPolicy": "LOG_ERROR",
            "ApplyErrorEscalationPolicy": "LOG_ERROR",
            "RecoverableErrorCount": -1,
            "DataErrorEscalationCount": 0,
            "TableErrorEscalationPolicy": "STOP_TASK",
            "RecoverableErrorInterval": 5,
            "ApplyErrorDeletePolicy": "IGNORE_RECORD",
            "TableErrorEscalationCount": 0,
            "FullLoadIgnoreConflicts": true,
            "DataErrorPolicy": "LOG_ERROR",
            "TableErrorPolicy": "SUSPEND_TABLE"
          },
          "TTSettings": {
            "TTS3Settings": null,
            "TTRecordSettings": null,
            "EnableTT": false
          },
          "FullLoadSettings": {
            "CommitRate": 10000,
            "StopTaskCachedChangesApplied": false,
            "StopTaskCachedChangesNotApplied": false,
            "MaxFullLoadSubTasks": 8,
            "TransactionConsistencyTimeout": 600,
            "CreatePkAfterFullLoad": false,
            "TargetTablePrepMode": "DO_NOTHING"
          },
          "TargetMetadata": {
            "ParallelApplyBufferSize": 0,
            "ParallelApplyQueuesPerThread": 0,
            "ParallelApplyThreads": 0,
            "TargetSchema": "",
            "InlineLobMaxSize": 0,
            "ParallelLoadQueuesPerThread": 0,
            "SupportLobs": true,
            "LobChunkSize": 0,
            "TaskRecoveryTableEnabled": false,
            "ParallelLoadThreads": 0,
            "LobMaxSize": 32,
            "BatchApplyEnabled": false,
            "FullLobMode": false,
            "LimitedSizeLobMode": true,
            "LoadMaxFileSize": 0,
            "ParallelLoadBufferSize": 0
          },
          "BeforeImageSettings": null,
          "ControlTablesSettings": {
            "historyTimeslotInMinutes": 5,
            "HistoryTimeslotInMinutes": 5,
            "StatusTableEnabled": true,
            "SuspendedTablesTableEnabled": true,
            "HistoryTableEnabled": true,
            "ControlSchema": "control_tables",
            "FullLoadExceptionTableEnabled": false
          },
          "LoopbackPreventionSettings": null,
          "CharacterSetSettings": null,
          "FailTaskWhenCleanTaskResourceFailed": false,
          "ChangeProcessingTuning": {
            "StatementCacheSize": 50,
            "CommitTimeout": 1,
            "BatchApplyPreserveTransaction": true,
            "BatchApplyTimeoutMin": 1,
            "BatchSplitSize": 0,
            "BatchApplyTimeoutMax": 30,
            "MinTransactionSize": 1000,
            "MemoryKeepTime": 60,
            "BatchApplyMemoryLimit": 500,
            "MemoryLimitTotal": 1024
          },
          "ChangeProcessingDdlHandlingPolicy": {
            "HandleSourceTableDropped": true,
            "HandleSourceTableTruncated": true,
            "HandleSourceTableAltered": true
          }
        }
      TableMappings: !Sub
        - >
          {
              "rules": [
                  {
                      "rule-type": "selection",
                      "rule-id": "0",
                      "rule-name": "select-all",
                      "object-locator": {
                          "schema-name": "${DatabaseSchema}",
                          "table-name": "%"
                      },
                      "rule-action": "include",
                      "filters": []
                  }
              ]
          }
